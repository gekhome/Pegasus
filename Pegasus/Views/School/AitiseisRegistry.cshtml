@model IEnumerable<Pegasus.DAL.sqlTEACHER_AITISEIS>
@using Pegasus.DAL;
@using Pegasus.Models;
@{
    ViewBag.Title = "Μητρώο Αιτήσεων";
    Layout = "~/Views/Shared/_SchoolLayout.cshtml";
}


<div class="page-header" style="margin:5px 20px 5px 20px">
    <div>
        <span style="font-family:'Segoe UI';font-size:large;text-shadow:1px 1px #8c8c8c">
            <font style="color:#494949;font-family:'Segoe UI'">Μητρώο αιτήσεων εκπαιδευτικών</font>
        </span>
        <span style="margin:0px 5px 5px 5px;float:right;font-family:'Segoe UI';font-size:14px">@Html.ActionLink("Επιστροφή", "Index", "School", null, new { @class = "btn btn-warning", style = "font-size:14px" })</span>
        <button class="btn btn-primary" style="margin:0px 5px 5px 5px;float:right;font-family:'Segoe UI';font-size:14px" onclick="RefreshGrid()">Ανανέωση</button>
    </div>
</div>

<div class="body-content" style="margin:5px 20px 5px 20px">
    @(Html.Kendo().Grid(Model)
        .Name("Grid")
        .Columns(columns =>
        {
            columns.Bound(c => c.PROTOCOL).Title("Προκήρυξη").Width(24);
            columns.Bound(c => c.AFM).Title("Α.Φ.Μ.").Width(16).Groupable(false);
            columns.Bound(c => c.FULLNAME).Title("Ονοματεπώνυμο").Width(40)
                .ClientFooterTemplate("Συνολ. πλήθος: #=count#")
                .ClientGroupFooterTemplate("Πλήθος: #=count#");
            columns.Bound(c => c.EIDIKOTITA_TEXT).Title("Κλάδος-Ειδικότητα").Width(40);
            columns.Bound(c => c.PERIFERIA_NAME).Title("Περιφέρεια Αίτησης").Width(45);
            columns.Bound(c => c.SCHOOL_NAME).Title("ΙΕΚ Αίτησης").Width(30);
            columns.Template(
                @<text></text>)
            .ClientTemplate(
            "<a class=\"k-button k-button-icontext\" href='" + Url.Action("ViewAitisi", "School") + "?aitisiId=#=AITISI_ID#' target = _blank><span class=\"k-icon k-edit\"></span>Προβολή</a>"
            ).Width(22);
            columns.Template(
                @<text></text>)
            .ClientTemplate(
            "<a class=\"k-button k-button-icontext\" href='" + Url.Action("ResultsMoriaView", "School") + "?aitisiId=#=AITISI_ID#' target = _blank><span class=\"k-icon k-edit\"></span>Μόρια</a>"
            ).Width(18);
        })
            .HtmlAttributes(new { style="font-size:12px" })
            .Filterable()
            .Groupable()
            .Selectable()
            .Scrollable(scr => scr.Height(360))
            .Pageable(pageable => pageable
            .Refresh(true)
            .PageSizes(true)
            .ButtonCount(10))
            .DataSource(datasource => datasource
            .Ajax()
            .PageSize(60)
            .ServerOperation(true)
            .Events(events => events.Error("error_handler"))
            .Model(model =>
            {
                model.Id(p => p.AITISI_ID);
            })
            .Aggregates(a =>
            {
                a.Add(p => p.FULLNAME).Count();
            })
            .Read(read => read.Action("Aitiseis_Read", "School").Data("dataProkirixeis"))
        )
        .Sortable(sortable => sortable.AllowUnsort(true).SortMode(GridSortMode.MultipleColumn))
        .Events(e => e.Change("change"))
    )
</div>

<div class="body-content" style="margin: 10px 20px 5px 20px; font-size: 14px; background-color: #1D7CAE; padding: 4px 4px 4px 4px">
    <label style="font-size:14px;font-weight:bold;color:white">Προκήρυξη : </label>
    @(Html.Kendo().DropDownList()
        .Name("ddlProkirixeis")
        .DataTextField("PROTOCOL")
        .DataValueField("ID")
        .HtmlAttributes(new { style = "width:220px;font-size:14px;font-weight:bold" })
        .OptionLabel("Επιλογή...")
        .AutoBind(true)
        .Enable(true)
        .DataSource(source => { source.Read(read => { read.Action("GetProkirixeis", "School"); }).ServerFiltering(true); })
        .Events(e =>
        {
            e.Select("ddlselect");
        })
    )
    <span style="margin-right:5px;float:right;font-family:'Segoe UI'">
        <input style="font-family:'Segoe UI';font-size:13px" type="button" onclick="printExperience()" title="Εκτύπωση προϋπηρεσιών επιλεγμένης αίτησης" value="Εκτύπωση προϋπηρεσιών" class="btn btn-default" />
    </span>
</div>

<div id="ExperiencePanel" class="row" style="margin:10px 20px 5px 20px">
    @(Html.Kendo().TabStrip()
    .Name("WorkTabStrip")
    .Items(items =>
    {
        items.Add()
        .Text("Διδακτικές")
        .Selected(true)
        .Content(
        @<text>
        <div class="row" style="margin-right: 10px; margin-left: 10px">
        @(Html.Kendo().Grid<ViewModelTeaching>()
        .Name("Child1")
        .Columns(columns =>
        {
            columns.ForeignKey(f => f.TEACH_TYPE, (IEnumerable<SYS_TEACH1_TYPES>)ViewData["teach_types"], "TYPE_ID", "TYPE_TEXT").Width(30);
            columns.ForeignKey(f => f.SCHOOL_YEAR, (IEnumerable<SYS_SCHOOLYEARS>)ViewData["school_years"], "SY_ID", "SY_TEXT").Width(15);
            columns.Bound(m => m.DATE_FROM).Width(12).Title("Από");
            columns.Bound(m => m.DATE_TO).Width(12).Title("Έως");
            columns.Bound(m => m.DOC_ORIGIN).Width(30);
            columns.Bound(m => m.DOC_PROTOCOL).Width(16).Filterable(false);
            columns.Bound(m => m.HOURS).Width(12).Title("Σύν.ώρες").Filterable(false);
            columns.Bound(m => m.HOURS_WEEK).Width(10).Title("Ώρες/εβδ").Filterable(false);
            columns.Bound(m => m.MORIA).Width(10).Format("{0:0.00}").Filterable(false);
        })
        .HtmlAttributes(new { style = "display: block;font-size:12px" })
        .Navigatable()
        .Filterable()
        .Groupable()
        .Selectable()
        .Sortable(sortable => sortable.AllowUnsort(true).SortMode(GridSortMode.MultipleColumn))
        .Scrollable(scr => scr.Height(300))
        .Pageable(pageable => pageable
        .Refresh(true)
        .PageSizes(true)
        .ButtonCount(10))
        .DataSource(datasource => datasource
        .Ajax()
        .PageSize(40)
        .ServerOperation(true)
        .Model(model =>
        {
            model.Id(p => p.EXP_ID);
            model.Field(p => p.TEACH_TYPE).DefaultValue(1);
            model.Field(p => p.SCHOOL_YEAR).DefaultValue((int)ViewData["defaultSchoolYear"]);
        })
        //.Group(groups => groups.Add(p => p.TEACH_TYPE))
        .Read(read => read.Action("Teaching_Read", "School").Data("data"))
        )
        )
        </div>
        <p></p>
        </text>);
        items.Add()
        .Text("Επαγγελματικές")
        .Content(
        @<text>
        <div class="row" style="margin-right: 10px; margin-left: 10px">
        @(Html.Kendo().Grid<ViewModelVocational>()
        .Name("Child2")
        .Columns(columns =>
        {
            columns.Bound(m => m.DATE_FROM).Width(20);
            columns.Bound(m => m.DATE_TO).Width(20);
            columns.Bound(m => m.DAYS_AUTO).Width(18);
            columns.Bound(m => m.DAYS_MANUAL).Width(18);
            columns.Bound(m => m.DOC_ORIGIN).Width(30);
            columns.Bound(m => m.DOC_PROTOCOL).Width(20).Filterable(false);
            columns.Bound(m => m.MORIA).Width(12).Format("{0:0.00}").Filterable(false);
        })
            .HtmlAttributes(new { style = "display: block;font-size:12px" })
            .Navigatable()
            .Filterable()
            .Groupable()
            .Sortable(sortable => sortable.AllowUnsort(true).SortMode(GridSortMode.MultipleColumn))
            .Scrollable(scr => scr.Height(240))
            .Pageable(pageable => pageable
            .Refresh(true)
            .PageSizes(true)
            .ButtonCount(10))
            .DataSource(datasource => datasource
            .Ajax()
            .PageSize(40)
            .ServerOperation(false)
            .Model(model =>
            {
                model.Id(p => p.EXP_ID);
            })
            .Read(read => read.Action("Vocation_Read", "School").Data("data"))
            )
        )
        </div>
        <p></p>
        </text>);
        items.Add()
        .Text("Ελεύθερο επάγγελμα")
        .Content(
        @<text>
        <div class="row" style="margin-right: 10px; margin-left: 10px">
        @(Html.Kendo().Grid<ViewModelFreelance>()
        .Name("Child3")
        .Columns(columns =>
        {
            columns.ForeignKey(f => f.INCOME_YEAR, (IEnumerable<SYS_TAXFREE>)ViewData["income_years"], "YEAR_ID", "YEAR_TEXT").Width(20)
            .HtmlAttributes(new { id = "years" });
            columns.Bound(m => m.INCOME).Width(16);
            columns.Bound(m => m.DATE_FROM).Width(18);
            columns.Bound(m => m.DATE_TO).Width(18);
            columns.Bound(m => m.DAYS_AUTO).Width(15);
            columns.Bound(m => m.DAYS_MANUAL).Width(15);
            columns.Bound(m => m.DOC_ORIGIN).Width(30);
            columns.Bound(m => m.DOC_PROTOCOL).Width(20).Filterable(false);
            columns.Bound(m => m.MORIA).Width(12).Format("{0:0.00}").Filterable(false);
        })
        .HtmlAttributes(new { style = "display: block;font-size:12px" })
        .Navigatable()
        .Filterable()
        .Sortable(sortable => sortable.AllowUnsort(true).SortMode(GridSortMode.MultipleColumn))
        .Scrollable(scr => scr.Height(240))
        .Pageable(pageable => pageable
        .Refresh(true)
        .PageSizes(true)
        .ButtonCount(5))
        .DataSource(datasource => datasource
        .Ajax()
        .PageSize(20)
        .ServerOperation(false)
        .Model(model =>
        {
            model.Id(p => p.EXP_ID);
            model.Field(p => p.INCOME_YEAR).DefaultValue(1);
        })
        .Read(read => read.Action("Freelance_Read", "School").Data("data"))
        )
        )
        </div>
        <p></p>
        </text>);
    })
    ) @* End Tabstrip*@
</div>


<script type="text/javascript">

    function printExperience() {
        var masterGrid = $("#Grid").data("kendoGrid");
        var dataItem = masterGrid.dataItem(masterGrid.select());
        if (dataItem) {
            var aitisiID = dataItem.AITISI_ID;
            window.open('@Url.Action("AitisiExperiencePrint", "School")?aitisiId=' + aitisiID);
        }
        else {
            MessageBoxAlert("Για να γίνει η εκτύπωση του πίνακα προϋπηρεσιών πρέπει πρώτα να επιλέξετε μια αίτηση.");
        }
    }

    function ddlselect(e) {
        var dataItem = this.dataItem(e.item.index());

        if (dataItem) {
            var prokID = dataItem.ID;
            $("#Grid").data("kendoGrid").dataSource.read({ prokirixiId: prokID });
            $("#Grid").css("display", "block");
        }
    };

    function dataProkirixeis() {
        var prokID = $("#ddlProkirixeis").data("kendoDropDownList").value();
        if (prokID) {
            return { prokirixiId: prokID }
        }
        else {
            return { prokirixiId: 0 }
        }
    }

    function data() {
        var prokID = $("#ddlProkirixeis").data("kendoDropDownList").value();
        var masterGrid = $("#Grid").data("kendoGrid");
        // get data item for selected row
        var dataItem = masterGrid.dataItem(masterGrid.select());
        if (dataItem && prokID) {
            return { aitisiID: dataItem.AITISI_ID };
        }
        else {
            return { aitisiID: 0 };
        }
    }

    function change(e) {
        var prokID = $("#ddlProkirixeis").data("kendoDropDownList").value();
        var dataItem = this.dataItem(this.select());

        if (dataItem && prokID) {
            var aitisiId = dataItem.AITISI_ID;
            $("#Child1").data("kendoGrid").dataSource.read({ aitisiID: aitisiId });
            $("#Child1").css("display", "block");

            $("#Child2").data("kendoGrid").dataSource.read({ aitisiID: aitisiId });
            $("#Child2").css("display", "block");

            $("#Child3").data("kendoGrid").dataSource.read({ aitisiID: aitisiId });
            $("#Child3").css("display", "block");
        }
        else {
            MessageBoxAlert("Πρέπει να επιλέξετε προκήρυξη για εμφάνιση προϋπηρεσιών.")
        }
    }

    function RefreshGrid(e) {
        var grid = $("#Grid").data("kendoGrid");
        grid.dataSource.read();
    }

    function getEditId() {
        var row = $(event.srcElement).closest("tr");
        var grid = $(event.srcElement).closest("[data-role=grid]").data("kendoGrid");
        var dataItem = grid.dataItem(row);
        return {
            AITISI_ID: dataItem.AITISI_ID
        };
    }
</script>

