@using Pegasus.DAL;
@using Pegasus.Models;
@{
    ViewBag.Title = "Μοριοδότηση αιτήσεων";
    Layout = "~/Views/Shared/_SchoolLayout.cshtml";
    int aitisi_id = (int)ViewData["aitisi_id"];     // this is properly set by controller "Main" and stores selected Aitisi ID
    int aitisiID = aitisi_id;
    string schoolYear = ViewData["schoolYearText"].ToString();
    string protocol = ViewData["prokirixiProtocol"].ToString();
    string displayInfo = schoolYear + ": " + protocol;       
}
@*<script src="@Url.Content("~/Scripts/date.format.js")" type="text/javascript"></script>*@
<script src="@Url.Content("~/Scripts/date-el-GR.js")" type="text/javascript"></script>

<script type="text/javascript">
    //Set autoclear of messages. Don't put this into $(document).ready.
    mvcNotify.autoClearTimeout = 0; //don't autoclear any types
    mvcNotify.typesToConsoleLog = "all"; //Log all types to console.
</script>

<head>
    <title></title>
    <link href="@Url.Content("~/Content/Site.css")" rel="stylesheet" type="text/css" />
</head>

@Html.AntiForgeryToken()
<div class="page-header" style="margin:10px 20px 5px 20px">
    <div>
        <span style="margin:5px 60px 5px 20px;font-family:'Segoe UI';font-size:14px">
            <font style="color:#494949;float:left;font-family:'Segoe UI';font-style:normal">
                @Html.Label("", "Αιτήσεις προκήρυξης  " + displayInfo, new { @style = "font-family:'Segoe UI';font-style:normal" })
            </font>
        </span>
        <span style="margin:0px 4px 5px 4px;float:right;font-family:'Segoe UI';font-size:14px">
            @Html.ActionLink("Επιστροφή", "Index", "School", null, new { @class = "btn btn-warning", style = "font-size:14px" })
        </span>
        <div class="tooltip2" style="margin:0px 4px 5px 4px;float:right;font-family:'Segoe UI';font-size:14px">
            <button class="btn btn-danger" style="margin:0px 4px 5px 4px;float:right;font-family:'Segoe UI';font-size:14px" onclick="Moriodotisi()">Μοριοδότηση</button>
            <span class="tooltip2text">Μοριοδότηση όλων των αιτήσεων του σχολείου</span>
        </div>
        <div id="divLoading" style="margin:0px 10px 5px 5px;float:right;font-family:'Segoe UI';font-size:14px; z-index: 30001;display:none">
            <p id="message-icon" style="margin-right:5px; font-size:13px;color:#00008b">
                Μοριοδότηση σε εξέλιξη. Περιμένετε...<img id="ajax-icon" src="~/Images/other/progress.gif" style="margin-left:5px;width:36px;height:36px">
            </p>
        </div>
    </div>
</div>

<div class="body-content" style="margin:10px 20px 5px 20px">
    @(Html.Kendo().Grid<sqlTeacherAitiseisModel>()
        .Name("Master")
        .HtmlAttributes(new { style = "font-size:12px" })
        .Columns(columns =>
        {
            columns.Bound(c => c.AFM).Width(18).Groupable(true);
            columns.Bound(c => c.FULLNAME).Width(50)
                .ClientFooterTemplate("Ολικό πλήθος: #=count#")
                .ClientGroupFooterTemplate("Πλήθος: #=count#");
            columns.Bound(c => c.EIDIKOTITA_TEXT).Width(70);
            columns.Bound(c => c.CHECK_STATUS).ClientTemplate("<input type='checkbox' #= CHECK_STATUS ? checked='checked' : '' # ></input>").Width(12).Filterable(false);
            columns.Template(@<text></text>)
            .ClientTemplate(
            "<a class=\"k-button k-button-icontext\" href='" + Url.Action("AitisiEdit", "SchoolAitiseis") + "?aitisiId=#=AITISI_ID#' target = _blank><span class=\"k-icon k-edit\"></span>Αίτηση</a>"
            ).Width(20);
            columns.Template(@<text></text>)
            .ClientTemplate(
            "<a class=\"k-button k-button-icontext\" href='" + Url.Action("ListSchools", "SchoolAitiseis") + "?aitisiId=#=AITISI_ID#' target = _blank><span class=\"k-icon k-edit\"></span>Σχολεία</a>"
            ).Width(22);
            columns.Template(@<text></text>)
            .ClientTemplate(
            "<a class=\"k-button k-button-icontext\" href='" + Url.Action("ReeducationList", "SchoolAitiseis") + "?aitisiId=#=AITISI_ID#' target = _blank><span class=\"k-icon k-edit\"></span>Επιμόρφωση</a>"
            ).Width(25);
            columns.Template(@<text></text>)
            .ClientTemplate(
            "<a class=\"k-button k-button-icontext\" href='" + Url.Action("AitisiUploadedFiles", "SchoolAitiseis") + "?aitisiId=#=AITISI_ID#' target = _blank><span class=\"k-icon k-cloud\"></span>Αρχεία</a>"
            ).Width(20);
            columns.Template(@<text></text>)
            .ClientTemplate(
            "<a class=\"k-button k-button-icontext\" href='" + Url.Action("MoriaResultsView", "SchoolAitiseis") + "?aitisiId=#=AITISI_ID#' target = _blank><span class=\"k-icon k-edit\"></span>Μόρια</a>"
            ).Width(20);
        })
        .Filterable()
        .Groupable()
        .Selectable()
        .Scrollable(scr => scr.Height(340))
        .Pageable(pageable => pageable
        .Refresh(true)
        .PageSizes(true)
        .ButtonCount(10))
        .DataSource(datasource => datasource
        .Ajax()
        .PageSize(60)
        .ServerOperation(true)
        .Model(model =>
        {
            model.Id(p => p.AITISI_ID);
        })
        .Aggregates(a =>
        {
            a.Add(p => p.FULLNAME).Count();
        })
        .Read(read => read.Action("Aitiseis_Read", "SchoolAitiseis", new { aitisiID }))
    )
    .Sortable(sortable => sortable.AllowUnsort(true).SortMode(GridSortMode.MultipleColumn))
    .Events(events => events.Change("change"))
    )
</div>

<div id="ExperiencePanel" class="row" style="margin:10px 20px 5px 20px">
    @(Html.Kendo().TabStrip()
    .Name("WorkTabStrip")
    .Items(items =>
    {
        items.Add()
        .Text("Διδακτικές")
        .Selected(true)
        .Content(
        @<text>
        <div class="row" style="margin-right:2px; margin-left:2px">
            @(Html.Kendo().Grid<ViewModelTeaching>()
            .Name("Child1")
            .Columns(columns =>
            {
                columns.ForeignKey(f => f.TEACH_TYPE, (IEnumerable<SYS_TEACH1_TYPES>)ViewData["teach_types"], "TYPE_ID", "TYPE_TEXT").Width(38);
                columns.ForeignKey(f => f.SCHOOL_YEAR, (IEnumerable<SYS_SCHOOLYEARS>)ViewData["school_years"], "SY_ID", "SY_TEXT").Width(20).Title("Σχ.έτος");
                columns.Bound(m => m.DATE_FROM).Width(20).Filterable(false);
                columns.Bound(m => m.DATE_TO).Width(20).Filterable(false);
                columns.Bound(m => m.HOURS).Width(15).Filterable(false);
                columns.Bound(m => m.HOURS_WEEK).Width(15).Filterable(false);
                columns.Bound(m => m.MORIA).Width(12).Format("{0:0.00}").Filterable(false);
                columns.Command(command => { command.Edit(); command.Destroy(); }).Width(40);            
            })
            .ToolBar(toolBar =>
            {
                toolBar.Create();
            })
            .HtmlAttributes(new { style = "font-size:14px" })
            .Navigatable()
            .Filterable()
            .Groupable()
            .Selectable()
            .Editable(edit => edit.Mode(GridEditMode.PopUp).Window(w => w.Width(800).Height(600).Title("Επεξεργασία διδακτικής εμπειρίας")).TemplateName("FormTeaching"))
            .Events(e => e.Edit("onEdited1"))
            .Sortable(sortable => sortable.AllowUnsort(true).SortMode(GridSortMode.MultipleColumn))
            .Scrollable(scr => scr.Height(360))
            .Pageable(pageable => pageable
            .Refresh(true)
            .PageSizes(true)
            .ButtonCount(10))
            .DataSource(datasource => datasource
            .Ajax()
            .PageSize(40)
            .ServerOperation(false)
            .Model(model =>
            {
                model.Id(p => p.EXP_ID);
                model.Field(p => p.AITISI_ID).Editable(false);
                model.Field(p => p.TEACH_TYPE).DefaultValue(1);
                model.Field(p => p.SCHOOL_YEAR).DefaultValue((int)ViewData["defaultSchoolYear"]);
                model.Field(p => p.MORIA).Editable(false);
            })
            .Create(create => create.Action("Teaching_Create", "SchoolAitiseis").Data("data"))
            .Read(read => read.Action("Teaching_Read", "SchoolAitiseis").Data("data"))
            .Update(update => update.Action("Teaching_Update", "SchoolAitiseis").Data("data"))
            .Destroy(destroy => destroy.Action("Teaching_Destroy", "SchoolAitiseis"))
            .Events(events => events.Error("error_handler1"))
            )
            )
        </div>
        <p></p>
        </text>);

        items.Add()
        .Text("Επαγγελματικές")
        .Content(
        @<text>
        <div class="row" style="margin-right:2px; margin-left:2px">
            @(Html.Kendo().Grid<ViewModelVocational>()
            .Name("Child2")
            .Columns(columns =>
            {
                columns.Bound(m => m.DATE_FROM).Width(22);
                columns.Bound(m => m.DATE_TO).Width(22);
                columns.Bound(m => m.DAYS_AUTO).Width(20);
                columns.Bound(m => m.DAYS_MANUAL).Width(20);
                columns.Bound(m => m.MORIA).Width(14).Format("{0:0.00}");
                columns.Command(command => { command.Edit(); command.Destroy(); }).Width(40);
            })
            .ToolBar(toolBar =>
            {
                toolBar.Create();
            })
            .HtmlAttributes(new { style = "font-size:14px" })
            .Navigatable()
            .Filterable()
            .Groupable()
            .Editable(edit => edit.Mode(GridEditMode.PopUp).Window(w => w.Width(800).Height(560)
                .Title("Επεξεργασία επαγγελματικής εμπειρίας")).TemplateName("FormVocational"))
            .Events(e => e.Edit("onEdited2"))
            .Sortable(sortable => sortable.AllowUnsort(true).SortMode(GridSortMode.MultipleColumn))
            .Scrollable(scr => scr.Height(300))
            .Pageable(pageable => pageable
            .Refresh(true)
            .PageSizes(true)
            .ButtonCount(10))
            .DataSource(datasource => datasource
            .Ajax()
            .PageSize(40)
            .ServerOperation(false)
            .Model(model =>
            {
                model.Id(p => p.EXP_ID);
                model.Field(p => p.MORIA).Editable(false);
                model.Field(p => p.DAYS_AUTO).Editable(false);
                model.Field(p => p.AITISI_ID).Editable(false);                        
            })
            .Create(create => create.Action("Vocation_Create", "SchoolAitiseis").Data("data"))
            .Read(read => read.Action("Vocation_Read", "SchoolAitiseis").Data("data"))
            .Update(update => update.Action("Vocation_Update", "SchoolAitiseis").Data("data"))
            .Destroy(destroy => destroy.Action("Vocation_Destroy", "SchoolAitiseis"))
            .Events(events => events.Error("error_handler2"))
            )
            )
        </div>
        <p></p>
        </text>);
        items.Add()
        .Text("Ελεύθερο επάγγελμα")
        .Content(
        @<text>
        <div class="row" style="margin-right:2px; margin-left:2px">
            @(Html.Kendo().Grid<ViewModelFreelance>()
            .Name("Child3")
            .Columns(columns =>
            {
                columns.ForeignKey(f => f.INCOME_YEAR, (IEnumerable<SYS_TAXFREE>)ViewData["income_years"], "YEAR_ID", "YEAR_TEXT").Width(22)
                .HtmlAttributes(new { id = "years" });
                columns.Bound(m => m.INCOME).Width(18);
                columns.Bound(m => m.DATE_FROM).Width(22);
                columns.Bound(m => m.DATE_TO).Width(22);
                columns.Bound(m => m.DAYS_AUTO).Width(20);
                columns.Bound(m => m.DAYS_MANUAL).Width(20);
                columns.Bound(m => m.MORIA).Width(14).Format("{0:0.00}");
                columns.Command(command => { command.Edit(); command.Destroy(); }).Width(40);
            })
            .ToolBar(toolBar =>
            {
                toolBar.Create();
            })
            .HtmlAttributes(new { style = "font-size:14px" })
            .Navigatable()
            .Filterable()
            .Editable(edit => edit.Mode(GridEditMode.PopUp).Window(w => w.Width(800).Height(600)
                .Title("Επεξεργασία εμπειρίας επιτηδεύματος")).TemplateName("FormFreelance"))
            .Events(e => e.Edit("onEdited3"))
            .Sortable(sortable => sortable.AllowUnsort(true).SortMode(GridSortMode.MultipleColumn))
            .Scrollable(scr => scr.Height(360))
            .Pageable(pageable => pageable
            .Refresh(true)
            .PageSizes(true)
            .ButtonCount(5))
            .DataSource(datasource => datasource
            .Ajax()
            .PageSize(20)
            .ServerOperation(false)
            .Model(model =>
            {
                model.Id(p => p.EXP_ID);
                model.Field(p => p.INCOME_YEAR).DefaultValue(1);
                model.Field(p => p.MORIA).Editable(false);
                model.Field(p => p.DAYS_AUTO).Editable(false);
                model.Field(p => p.AITISI_ID).Editable(false);                        
            })
            .Create(create => create.Action("Freelance_Create", "SchoolAitiseis").Data("data"))
            .Read(read => read.Action("Freelance_Read", "SchoolAitiseis").Data("data"))
            .Update(update => update.Action("Freelance_Update", "SchoolAitiseis").Data("data"))
            .Destroy(destroy => destroy.Action("Freelance_Destroy", "SchoolAitiseis"))
            .Events(events => events.Error("error_handler3"))
            )
            )
        </div>
        <p></p>
        </text>);
    })
    ) @* End Tabstrip*@
</div>

<script type="text/javascript">

    function onEdited1(e) {
        e.container.data().kendoWindow.bind("deactivate", function () { RefreshGrid1(e); });
    }

    function RefreshGrid1(e) {
        var grid = $("#Child1").data("kendoGrid");
        grid.dataSource.read();
    }

    function onEdited2(e) {
        e.container.data().kendoWindow.bind("deactivate", function () { RefreshGrid2(e); });
    }

    function RefreshGrid2(e) {
        var grid = $("#Child2").data("kendoGrid");
        grid.dataSource.read();
    }

    function onEdited3(e) {
        e.container.data().kendoWindow.bind("deactivate", function () { RefreshGrid3(e); });
    }

    function RefreshGrid3(e) {
        var grid = $("#Child3").data("kendoGrid");
        grid.dataSource.read();
    }

    function TransferExperiences(e) {
        var masterGrid = $("#Master").data("kendoGrid");
        // get data item for selected row
        var dataItem = masterGrid.dataItem(masterGrid.select());
        if (!dataItem) {
            MessageBoxAlert("Πρέπει πρώτα να επιλέξετε την αίτηση με κλικ επάνω στην αντίστοιχη γραμμή του πλέγματος.")
            return;
        }
        var aitisiId = dataItem.AITISI_ID;
        $.ajax({
            url: '@Url.Action("TransferExperiences", "SchoolAitiseis")?aitisiID=' + aitisiId,
            type: 'GET',
            data: "",
            contentType: 'application/json; charset=utf-8',
            success: function (data) {
                if (data != "") MessageBoxAlert(data);
                RefreshChildren(aitisiId);
            },
            error: function () {
                MessageBoxAlert("Προέκυψε σφάλμα. Δοκιμάστε πάλι αργότερα.");
            }
        });
    }

    function RefreshChildren(aitisiId) {
        $("#Child1").data("kendoGrid").dataSource.read({ aitisiID: aitisiId });
        $("#Child1").css("display", "block");

        $("#Child2").data("kendoGrid").dataSource.read({ aitisiID: aitisiId });
        $("#Child2").css("display", "block");

        $("#Child3").data("kendoGrid").dataSource.read({ aitisiID: aitisiId });
        $("#Child3").css("display", "block");
    }

</script>

<script type="text/javascript">

    function Moriodotisi() {

        var msg = "Για διευκόλυνση των επιτροπών και ελάφρυνση του φόρτου του\n";
        msg += "εξυπηρετητή, η μοριοδότηση συνιστάται να γίνεται από το κουμπί\n";
        msg += "'Μόρια' για κάθε εκπαιδευτικό ξεχωριστά.";
        MessageBoxAlert(msg);

        $('#divLoading').show();
        $.ajax({
            url: '@Url.Action("Moriodotisi", "SchoolAitiseis")',
            type: 'GET',
            data: "",
            contentType: 'application/json; charset=utf-8',
            success: function (data) {
                $('#divLoading').hide();
                if (data) MessageBoxAlert(data);
            },
            error: function () {
                MessageBoxAlert("Προέκυψε σφάλμα. Δοκιμάστε πάλι αργότερα.");
            }
        });
    }

</script>

<script id="FindNewRecord">
    $("#cmdFindNewRecord").click(function (e) {

        e.preventDefault(); // required, otherwise it refreshes the page (performs post back)

        var grid = $("#Child1").data("kendoGrid");
        var data = grid.dataSource.data();
        var parameters = localStorage.getItem("parameters");
        var sc = JSON.parse(parameters);

        var dateFrom = sc.date1;
        var dateTo = sc.date2;
        var teach = sc.type;

        //MessageBoxAlert("string dates :" + dateFrom + ", " + dateTo);

        var date1 = toDate(dateFrom);
        var date2 = toDate(dateTo);

        var criteria = {
            date1: dateFrom,
            date2: dateTo,
            type: teach
        }

        findDataItem(criteria);
    });

</script>

<script id="AddNewRecord">
    $("#cmdAddNewRecord").click(function (e) {

        e.preventDefault();
        var grid = $("#Child1").data("kendoGrid");
        var dataRows = grid.items();
        if (dataRows > 0) {
            grid.dataSource.query({
                page: 1,
                pageSize: 40
            });
            grid.dataSource.group({ field: "TEACH_TYPE" });
        }
        grid.addRow();
    });

</script>


<script type="text/javascript">

    function findDataItem(sc) {
        //get grid datasource
        var grid = $("#Child1").data("kendoGrid");
        grid.refresh();
        //grid.dataSource.read();   // DO NOT ENABLE (Changes rows uid and selection fails)
        var ds = grid.dataSource;
        var rowid = '';

        //MessageBoxAlert("passed parameters = " + sc.type + ", " + sc.date1 + ", " + sc.date2);
        var view = kendo.data.Query.process(ds.data(), {
            filter: ds.filter(),
            sort: ds.sort(),
        }).data;

        var index = -1;
        for (var x = 0; x < view.length; x++) {
            if (view[x].TEACH_TYPE == sc.type && formatDate(view[x].DATE_FROM) == sc.date1 && formatDate(view[x].DATE_TO) == sc.date2) {
                rowid = view[x].EXP_ID;
                index = x;
                break;
            }
        }
        //MessageBoxAlert("index = " + index + ", row_id = " + rowid);
        if (index === -1) {
            return;
        }

        // from this point onward we search the data source data and not the view data
        // search by model id as the above method counts also group header rows giving wrong index
        var data = grid.dataSource.data();
        for (var i = 0; i < data.length; i++) {
            if (data[i].EXP_ID == rowid) {
                index = i;
                break;
            }
        }
        //MessageBoxAlert("index of data: " + index);
        // go to page where item is found
        var page = Math.floor(index / grid.dataSource.pageSize());
        grid.dataSource.page(++page);
        // select row based on model id (by index does not work due to group header rows)
        for (var i = 0; i < data.length; i++) {
            if (data[i].EXP_ID == rowid) {
                //MessageBoxAlert("item found at index: " + i);
                row = grid.tbody.find('tr[data-uid="' + data[i].uid + '"]');
                grid.select(row);
                break;
            }
        }
        scrollToSelected(grid);
    }

    function getFormattedDate(date) {
        var year = date.getFullYear();

        var month = (1 + date.getMonth()).toString();
        month = month.length > 1 ? month : '0' + month;

        var day = date.getDate().toString();
        day = day.length > 1 ? day : '0' + day;

        return day + '/' + month + '/' + year;
    }

    function toDate(dateStr) {
        var parts = dateStr.split("/");
        return new Date(parts[2], parts[1]-1, parts[0]);
    }

    function formatDate(date) {

        var day = date.getDate();
        var monthIndex = date.getMonth() + 1;
        var year = date.getFullYear();

        return day + '/' + monthIndex + '/' + year;
    }

    function onSave(e) {
        var grid = this;

        var row = grid.dataItem($(e.container).closest("tr"));        
        var data = grid.dataSource.data();
        var res = $.grep(data, function (d) {
            return d.TEACH_TYPE == row.TEACH_TYPE && d.DATE_FROM == row.DATE_FROM && d.DATE_TO == row.DATE_TO;
        });

        var dateFrom = formatDate(res[0].DATE_FROM);
        var dateTo = formatDate(res[0].DATE_TO);
        var teach = res[0].TEACH_TYPE;

        //MessageBoxAlert("date strings are:" + dateFrom + ", " + dateTo);

        //res[0].DATE_FROM = toDate(dateFrom);
        //res[0].DATE_TO = toDate(dateTo);

        var date1 = res[0].DATE_FROM;
        var date2 = res[0].DATE_TO;
        var teach = res[0].TEACH_TYPE;

        var criteria = {
            date1: dateFrom,
            date2: dateTo,
            type:  teach
        }

        localStorage.setItem("parameters", JSON.stringify(criteria));
    }

    function scrollToSelected(grid) {

        var scrollContentOffset = grid.element.find("tbody").offset().top;
        var selectContentOffset = grid.select().offset().top;
        var distance = selectContentOffset - scrollContentOffset;

        //animate our scroll
        grid.content.animate({
            scrollTop: distance
        }, 400);

    }


    function RefreshGrid(e) {
        var grid = $("#Master").data("kendoGrid");
        grid.dataSource.read();
    }

    //-------------------------------------------------------------
    // Although this works by itself it does not do so
    // after the user's sequence of events, i.e when we
    // press the small refresh button or navigate to another
    // page and return here. The variable lineToSelect always
    // contains the correct value but cannot be selected!
    // NEED TO RESOLVE IT!!!
    //
    // If we finally make it to work, this function will be
    // intergated into Restore()
    // 21/10/2016 : FINALLY WORKS!
    //-------------------------------------------------------------
    function Reselect() {
        var grid = $("#Master").data("kendoGrid");
        var selectedRow = localStorage.getItem("selected-row");
        var rowToSelect = JSON.parse(selectedRow);

        //MessageBoxAlert("rowToSelect: AITISI_ID = " + rowToSelect.AITISI_ID);
        var lineToSelect = null;

        // 16-08-2017: THIS NEVER FAILS!!!
        var data = grid.dataSource.data();
        for (var i = 0; i < data.length; i++) {
            if (data[i].AITISI_ID == rowToSelect.AITISI_ID) {
                var select = grid.tbody.find('tr[data-uid="' + data[i].uid + '"]');
                grid.select(select);
            }
        }
        // scroll to selected row (added: 29/9/2017)
        scrollToSelected(grid);
    }

    //------------------------------------------------------
    // this works but does not show page's data
    // we need to press the small refresh button of the grid
    // NEEED TO FIX THIS SO Reselect() be automatic here
    // 21/10/2016: FIXED (Main controller redesigned)
    //------------------------------------------------------
    function Restore(e) {
        var grid = $("#Master").data("kendoGrid");
        //grid.dataSource.read(); // refresh grid - so button Refresh not required

        $.ajax({
            url: '@Url.Action("Load", "Home")',
            success: function (state) {
                state = JSON.parse(state);
                var options = grid.options;

                //options.columns = state.columns;
                options.dataSource.page = state.page;
                options.dataSource.pageSize = state.pageSize;
                options.dataSource.sort = state.sort;
                options.dataSource.filter = state.filter;
                options.dataSource.group = state.group;

                grid.destroy();
                $("#Master").empty().kendoGrid(options);
                
            }
        });
        
        grid.wrapper.height(420);
        grid.resize();
        Reselect();   // apparently does nothing!?
    }

    function onSave1(e) {
        var masterGrid = $("#Master").data("kendoGrid");
        // get data item for selected row
        var dataItem = masterGrid.dataItem(masterGrid.select());
        var aitisiId = dataItem.AITISI_ID;

        //MessageBoxAlert("onSave1: " + aitisiId);

        $("#Child1").data("kendoGrid").dataSource.read({ aitisiID: aitisiId });
        $("#Child1").css("display", "block");
    }

    function onSave2(e) {
        var masterGrid = $("#Master").data("kendoGrid");
        // get data item for selected row
        var dataItem = masterGrid.dataItem(masterGrid.select());
        var aitisiId = dataItem.AITISI_ID;

        //MessageBoxAlert("onSave2: " + aitisiId);

        $("#Child2").data("kendoGrid").dataSource.read({ aitisiID: aitisiId });
        $("#Child2").css("display", "block");
    }

    function onSave3(e) {
        var masterGrid = $("#Master").data("kendoGrid");
        // get data item for selected row
        var dataItem = masterGrid.dataItem(masterGrid.select());
        var aitisiId = dataItem.AITISI_ID;

        //MessageBoxAlert("onSave3: " + aitisiId);

        $("#Child3").data("kendoGrid").dataSource.read({ aitisiID: aitisiId });
        $("#Child3").css("display", "block");
    }
    
    // ----------------------------------------------------------------
    // this does not fire when user executes refresh - which he must do
    // in order to edit a child grid row.
    // -----------------------------------------------------------------
    function change(e) {
        var dataItem = this.dataItem(this.select());
        var aitisiId = dataItem.AITISI_ID;

        $("#Child1").data("kendoGrid").dataSource.read({ aitisiID: aitisiId });
        $("#Child1").css("display", "block");

        $("#Child2").data("kendoGrid").dataSource.read({ aitisiID: aitisiId });
        $("#Child2").css("display", "block");

        $("#Child3").data("kendoGrid").dataSource.read({ aitisiID: aitisiId });
        $("#Child3").css("display", "block");
    }

    function data() {
        var masterGrid = $("#Master").data("kendoGrid");
        // get data item for selected row
        var dataItem = masterGrid.dataItem(masterGrid.select());
        if (dataItem) {
            return { aitisiID: dataItem.AITISI_ID };
        }
        else {
            return { aitisiID: 0 };
        }
    }

    function error_handler1(e) {
        if (e.errors) {
            var message = "";
            $.each(e.errors, function (key, value) {
                if ('errors' in value) {
                    $.each(value.errors, function () {
                        message += this + "<br/>";
                    });
                }
            });
            MessageBoxAlert(message, "Σφάλμα");
        }
        $("#Child1").data("kendoGrid").dataSource.read();
    }

    function error_handler2(e) {
        if (e.errors) {
            var message = "";
            $.each(e.errors, function (key, value) {
                if ('errors' in value) {
                    $.each(value.errors, function () {
                        message += this + "<br/>";
                    });
                }
            });
            MessageBoxAlert(message, "Σφάλμα");
        }
        $("#Child2").data("kendoGrid").dataSource.read();
    }

    function error_handler3(e) {
        if (e.errors) {
            var message = "";
            $.each(e.errors, function (key, value) {
                if ('errors' in value) {
                    $.each(value.errors, function () {
                        message += this + "<br/>";
                    });
                }
            });
            MessageBoxAlert(message, "Σφάλμα");
        }
        $("#Child3").data("kendoGrid").dataSource.read();
    }

</script>

